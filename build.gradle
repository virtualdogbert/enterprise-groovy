/**
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

plugins {
    // Apply the groovy plugin to add support for Groovy
    id 'groovy'
    id 'maven-publish'
    id "com.jfrog.bintray" version "1.8.4"
    id "org.asciidoctor.gradle.asciidoctor" version "1.5.1"
}



group = "com.virtualdogbert"
version = "1.0.3"
description = "This library provides enterprise level control over Groovy compilation, like static compilation by default."

wrapper {
    gradleVersion = '5.2.1'
}

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

sourceSets {
    main.groovy.srcDir 'src'
}



dependencies {
    implementation 'org.codehaus.groovy:groovy-all:2.5.4'
    compileOnly 'org.codehaus.groovy:groovy-all:2.5.4'
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier "sources"
}

ext {
    theTitle = 'Enterprise Groovy'
    titleForDocumentation = archivesBaseName + ' ' + version
    packageTitle = group
    description = description
}

task jarDoc(type: Jar, dependsOn: [javadoc, groovydoc]) {
    classifier = 'javadoc'
    from docsDir
}

javadoc {
    options.overview('overview.html')
    options.showAll()
    options.encoding('UTF-8')
    options.setUse(true)
    options.author(true)
    options.version(true)
    options.windowTitle(titleForDocumentation)
    options.docTitle(titleForDocumentation)
    doFirst {
        javadoc.title = titleForDocumentation
        javadoc.options.docTitle = javadoc.title
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        // disable the crazy super-strict doclint tool in Java 8
        //noinspection SpellCheckingInspection
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

groovydoc {
    dependsOn(classes)
    includePrivate = true
    use = true
    windowTitle = packageTitle
    docTitle = packageTitle
    header = packageTitle
    include 'com/virtualdogbert/**'
}



publishing {
    publications {
        groovyMaven(MavenPublication) {
            from components.java

            artifact(sourceJar) {
                classifier "sources"
            }

            artifact jarDoc {
                classifier = 'javadoc'
            }
        }


    }
}

task jarSrc(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives(jarSrc)
    archives(jarDoc)
}


bintray {

    user = getPropertyOrUseDefault("bintrayUser", "fake_user")
    key = getPropertyOrUseDefault("bintrayKey", "fake_key")
    publications = ['groovyMaven']

    def projectName = project.name
    def projectDescription = project.description

    pkg {
        repo = 'maven'
        name = 'enterprise-groovy'
        desc = 'This library provides enterprise level control over Groovy compilation, like static copliation by default.'
        issueTrackerUrl = "https://github.com/virtualdogbert/enterprise-groovy/issues"
        vcsUrl = "https://github.com/virtualdogbert/enterprise-groovy"
        websiteUrl = "https://virtualdogbert.github.io/enterprise-groovy-plugin/"
        labels = ['gradle', 'plugin', 'groovy', 'enterprise', 'compileStatic', 'static compiliation', 'static']
        licenses = ['Apache-2.0']
    }
}

String getPropertyOrUseDefault(String propertyName, String defaultValue) {
    hasProperty(propertyName) ? getProperty(propertyName) : defaultValue
}

def asciidoctorAttributes = [
        copyright           : 'Apache License, Version 2.0',
        docinfo1            : 'true',
        doctype             : 'book',
        encoding            : 'utf-8',
        icons               : 'font',
        id                  : project.name + ':' + project.version,
        idprefix            : '',
        idseparator         : '-',
        lang                : 'en',
        linkattrs           : true,
        numbered            : '',
        producer            : 'Asciidoctor',
        revnumber           : project.version,
        setanchors          : true,
        'source-highlighter': 'prettify',
        toc                 : 'left',
        toc2                : '',
        toclevels           : '2'
]

import org.asciidoctor.gradle.AsciidoctorTask

tasks.withType(AsciidoctorTask) {
    attributes asciidoctorAttributes
    outputDir new File(buildDir, 'docs')
    separateOutputDirs = false
    sourceDir = file('src/docs')
    sources {
        include 'index.adoc'
    }
}

task asciidoc(type: AsciidoctorTask, description: 'Generates single-page HTML') {
    backends 'html5'
}

task docs(dependsOn: [asciidoc]) {

    File dir = new File(buildDir, 'docs')

    copy {
        from 'src/docs'
        into new File(buildDir, 'docs').path
        include '**/*.png'
    }
}


test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}